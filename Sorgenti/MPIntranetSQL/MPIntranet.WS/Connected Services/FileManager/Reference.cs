//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MPIntranet.WS.FileManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", ConfigurationName="FileManager.FileManagement_Port")]
    public interface FileManagement_Port {
        
        // CODEGEN: Generating message contract since the wrapper name (BrowseForFolderDialog_Result) of message BrowseForFolderDialog_Result does not match the default value (BrowseForFolderDialog)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:BrowseForFolderDialog", ReplyAction="*")]
        MPIntranet.WS.FileManager.BrowseForFolderDialog_Result BrowseForFolderDialog(MPIntranet.WS.FileManager.BrowseForFolderDialog request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:BrowseForFolderDialog", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.BrowseForFolderDialog_Result> BrowseForFolderDialogAsync(MPIntranet.WS.FileManager.BrowseForFolderDialog request);
        
        // CODEGEN: Generating message contract since the wrapper name (CreateFileNameWithExtension_Result) of message CreateFileNameWithExtension_Result does not match the default value (CreateFileNameWithExtension)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:CreateFileNameWithExtensio" +
            "n", ReplyAction="*")]
        MPIntranet.WS.FileManager.CreateFileNameWithExtension_Result CreateFileNameWithExtension(MPIntranet.WS.FileManager.CreateFileNameWithExtension request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:CreateFileNameWithExtensio" +
            "n", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.CreateFileNameWithExtension_Result> CreateFileNameWithExtensionAsync(MPIntranet.WS.FileManager.CreateFileNameWithExtension request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadTempFile_Result) of message DownloadTempFile_Result does not match the default value (DownloadTempFile)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:DownloadTempFile", ReplyAction="*")]
        MPIntranet.WS.FileManager.DownloadTempFile_Result DownloadTempFile(MPIntranet.WS.FileManager.DownloadTempFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:DownloadTempFile", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.DownloadTempFile_Result> DownloadTempFileAsync(MPIntranet.WS.FileManager.DownloadTempFile request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetDirectoryName_Result) of message GetDirectoryName_Result does not match the default value (GetDirectoryName)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetDirectoryName", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetDirectoryName_Result GetDirectoryName(MPIntranet.WS.FileManager.GetDirectoryName request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetDirectoryName", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetDirectoryName_Result> GetDirectoryNameAsync(MPIntranet.WS.FileManager.GetDirectoryName request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetExtension_Result) of message GetExtension_Result does not match the default value (GetExtension)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetExtension", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetExtension_Result GetExtension(MPIntranet.WS.FileManager.GetExtension request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetExtension", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetExtension_Result> GetExtensionAsync(MPIntranet.WS.FileManager.GetExtension request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetFileNameMimeType_Result) of message GetFileNameMimeType_Result does not match the default value (GetFileNameMimeType)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetFileNameMimeType", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetFileNameMimeType_Result GetFileNameMimeType(MPIntranet.WS.FileManager.GetFileNameMimeType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetFileNameMimeType", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileNameMimeType_Result> GetFileNameMimeTypeAsync(MPIntranet.WS.FileManager.GetFileNameMimeType request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetFileNameWithoutExtension_Result) of message GetFileNameWithoutExtension_Result does not match the default value (GetFileNameWithoutExtension)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetFileNameWithoutExtensio" +
            "n", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetFileNameWithoutExtension_Result GetFileNameWithoutExtension(MPIntranet.WS.FileManager.GetFileNameWithoutExtension request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetFileNameWithoutExtensio" +
            "n", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileNameWithoutExtension_Result> GetFileNameWithoutExtensionAsync(MPIntranet.WS.FileManager.GetFileNameWithoutExtension request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetFileName_Result) of message GetFileName_Result does not match the default value (GetFileName)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetFileName", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetFileName_Result GetFileName(MPIntranet.WS.FileManager.GetFileName request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetFileName", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileName_Result> GetFileNameAsync(MPIntranet.WS.FileManager.GetFileName request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetSafeFileName_Result) of message GetSafeFileName_Result does not match the default value (GetSafeFileName)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetSafeFileName", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetSafeFileName_Result GetSafeFileName(MPIntranet.WS.FileManager.GetSafeFileName request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetSafeFileName", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetSafeFileName_Result> GetSafeFileNameAsync(MPIntranet.WS.FileManager.GetSafeFileName request);
        
        // CODEGEN: Generating message contract since the wrapper name (GetToFilterText_Result) of message GetToFilterText_Result does not match the default value (GetToFilterText)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetToFilterText", ReplyAction="*")]
        MPIntranet.WS.FileManager.GetToFilterText_Result GetToFilterText(MPIntranet.WS.FileManager.GetToFilterText request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:GetToFilterText", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetToFilterText_Result> GetToFilterTextAsync(MPIntranet.WS.FileManager.GetToFilterText request);
        
        // CODEGEN: Generating message contract since the wrapper name (HasExtension_Result) of message HasExtension_Result does not match the default value (HasExtension)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:HasExtension", ReplyAction="*")]
        MPIntranet.WS.FileManager.HasExtension_Result HasExtension(MPIntranet.WS.FileManager.HasExtension request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:HasExtension", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.HasExtension_Result> HasExtensionAsync(MPIntranet.WS.FileManager.HasExtension request);
        
        // CODEGEN: Generating message contract since the wrapper name (IsAllowedPath_Result) of message IsAllowedPath_Result does not match the default value (IsAllowedPath)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:IsAllowedPath", ReplyAction="*")]
        MPIntranet.WS.FileManager.IsAllowedPath_Result IsAllowedPath(MPIntranet.WS.FileManager.IsAllowedPath request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:IsAllowedPath", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsAllowedPath_Result> IsAllowedPathAsync(MPIntranet.WS.FileManager.IsAllowedPath request);
        
        // CODEGEN: Generating message contract since the wrapper name (IsLocalFileSystemAccessible_Result) of message IsLocalFileSystemAccessible_Result does not match the default value (IsLocalFileSystemAccessible)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:IsLocalFileSystemAccessibl" +
            "e", ReplyAction="*")]
        MPIntranet.WS.FileManager.IsLocalFileSystemAccessible_Result IsLocalFileSystemAccessible(MPIntranet.WS.FileManager.IsLocalFileSystemAccessible request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:IsLocalFileSystemAccessibl" +
            "e", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsLocalFileSystemAccessible_Result> IsLocalFileSystemAccessibleAsync(MPIntranet.WS.FileManager.IsLocalFileSystemAccessible request);
        
        // CODEGEN: Generating message contract since the wrapper name (IsValidFileName_Result) of message IsValidFileName_Result does not match the default value (IsValidFileName)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:IsValidFileName", ReplyAction="*")]
        MPIntranet.WS.FileManager.IsValidFileName_Result IsValidFileName(MPIntranet.WS.FileManager.IsValidFileName request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:IsValidFileName", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsValidFileName_Result> IsValidFileNameAsync(MPIntranet.WS.FileManager.IsValidFileName request);
        
        // CODEGEN: Generating message contract since the wrapper name (Magicpath_Result) of message Magicpath_Result does not match the default value (Magicpath)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:Magicpath", ReplyAction="*")]
        MPIntranet.WS.FileManager.Magicpath_Result Magicpath(MPIntranet.WS.FileManager.Magicpath request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:Magicpath", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.Magicpath_Result> MagicpathAsync(MPIntranet.WS.FileManager.Magicpath request);
        
        // CODEGEN: Generating message contract since the wrapper name (MoveAndRenameServerFile_Result) of message MoveAndRenameServerFile_Result does not match the default value (MoveAndRenameServerFile)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:MoveAndRenameServerFile", ReplyAction="*")]
        MPIntranet.WS.FileManager.MoveAndRenameServerFile_Result MoveAndRenameServerFile(MPIntranet.WS.FileManager.MoveAndRenameServerFile request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:MoveAndRenameServerFile", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.MoveAndRenameServerFile_Result> MoveAndRenameServerFileAsync(MPIntranet.WS.FileManager.MoveAndRenameServerFile request);
        
        // CODEGEN: Generating message contract since the wrapper name (OpenFileDialog_Result) of message OpenFileDialog_Result does not match the default value (OpenFileDialog)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:OpenFileDialog", ReplyAction="*")]
        MPIntranet.WS.FileManager.OpenFileDialog_Result OpenFileDialog(MPIntranet.WS.FileManager.OpenFileDialog request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:OpenFileDialog", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.OpenFileDialog_Result> OpenFileDialogAsync(MPIntranet.WS.FileManager.OpenFileDialog request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:SelectFolderDialog", ReplyAction="*")]
        MPIntranet.WS.FileManager.SelectFolderDialog_Result SelectFolderDialog(MPIntranet.WS.FileManager.SelectFolderDialog request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:SelectFolderDialog", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.SelectFolderDialog_Result> SelectFolderDialogAsync(MPIntranet.WS.FileManager.SelectFolderDialog request);
        
        // CODEGEN: Generating message contract since the wrapper name (ServerFileExists_Result) of message ServerFileExists_Result does not match the default value (ServerFileExists)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:ServerFileExists", ReplyAction="*")]
        MPIntranet.WS.FileManager.ServerFileExists_Result ServerFileExists(MPIntranet.WS.FileManager.ServerFileExists request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:ServerFileExists", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.ServerFileExists_Result> ServerFileExistsAsync(MPIntranet.WS.FileManager.ServerFileExists request);
        
        // CODEGEN: Generating message contract since the wrapper name (StripNotsupportChrInFileName_Result) of message StripNotsupportChrInFileName_Result does not match the default value (StripNotsupportChrInFileName)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:StripNotsupportChrInFileNa" +
            "me", ReplyAction="*")]
        MPIntranet.WS.FileManager.StripNotsupportChrInFileName_Result StripNotsupportChrInFileName(MPIntranet.WS.FileManager.StripNotsupportChrInFileName request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:StripNotsupportChrInFileNa" +
            "me", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.StripNotsupportChrInFileName_Result> StripNotsupportChrInFileNameAsync(MPIntranet.WS.FileManager.StripNotsupportChrInFileName request);
        
        // CODEGEN: Generating message contract since the wrapper name (ValidateFileExtension_Result) of message ValidateFileExtension_Result does not match the default value (ValidateFileExtension)
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:ValidateFileExtension", ReplyAction="*")]
        MPIntranet.WS.FileManager.ValidateFileExtension_Result ValidateFileExtension(MPIntranet.WS.FileManager.ValidateFileExtension request);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:microsoft-dynamics-schemas/codeunit/FileManagement:ValidateFileExtension", ReplyAction="*")]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.ValidateFileExtension_Result> ValidateFileExtensionAsync(MPIntranet.WS.FileManager.ValidateFileExtension request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="BrowseForFolderDialog", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class BrowseForFolderDialog {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string windowTitle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public string defaultFolderName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=2)]
        public bool showNewFolderButton;
        
        public BrowseForFolderDialog() {
        }
        
        public BrowseForFolderDialog(string windowTitle, string defaultFolderName, bool showNewFolderButton) {
            this.windowTitle = windowTitle;
            this.defaultFolderName = defaultFolderName;
            this.showNewFolderButton = showNewFolderButton;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="BrowseForFolderDialog_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class BrowseForFolderDialog_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public BrowseForFolderDialog_Result() {
        }
        
        public BrowseForFolderDialog_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFileNameWithExtension", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class CreateFileNameWithExtension {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string fileNameWithoutExtension;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public string extension;
        
        public CreateFileNameWithExtension() {
        }
        
        public CreateFileNameWithExtension(string fileNameWithoutExtension, string extension) {
            this.fileNameWithoutExtension = fileNameWithoutExtension;
            this.extension = extension;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateFileNameWithExtension_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class CreateFileNameWithExtension_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public CreateFileNameWithExtension_Result() {
        }
        
        public CreateFileNameWithExtension_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadTempFile", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class DownloadTempFile {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string serverFileName;
        
        public DownloadTempFile() {
        }
        
        public DownloadTempFile(string serverFileName) {
            this.serverFileName = serverFileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadTempFile_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class DownloadTempFile_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public DownloadTempFile_Result() {
        }
        
        public DownloadTempFile_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDirectoryName", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetDirectoryName {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string fileName;
        
        public GetDirectoryName() {
        }
        
        public GetDirectoryName(string fileName) {
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetDirectoryName_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetDirectoryName_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetDirectoryName_Result() {
        }
        
        public GetDirectoryName_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExtension", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetExtension {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string name;
        
        public GetExtension() {
        }
        
        public GetExtension(string name) {
            this.name = name;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExtension_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetExtension_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetExtension_Result() {
        }
        
        public GetExtension_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileNameMimeType", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetFileNameMimeType {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string fileName;
        
        public GetFileNameMimeType() {
        }
        
        public GetFileNameMimeType(string fileName) {
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileNameMimeType_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetFileNameMimeType_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetFileNameMimeType_Result() {
        }
        
        public GetFileNameMimeType_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileNameWithoutExtension", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetFileNameWithoutExtension {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string filePath;
        
        public GetFileNameWithoutExtension() {
        }
        
        public GetFileNameWithoutExtension(string filePath) {
            this.filePath = filePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileNameWithoutExtension_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetFileNameWithoutExtension_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetFileNameWithoutExtension_Result() {
        }
        
        public GetFileNameWithoutExtension_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileName", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetFileName {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string filePath;
        
        public GetFileName() {
        }
        
        public GetFileName(string filePath) {
            this.filePath = filePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetFileName_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetFileName_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetFileName_Result() {
        }
        
        public GetFileName_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSafeFileName", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetSafeFileName {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string fileName;
        
        public GetSafeFileName() {
        }
        
        public GetSafeFileName(string fileName) {
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetSafeFileName_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetSafeFileName_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetSafeFileName_Result() {
        }
        
        public GetSafeFileName_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetToFilterText", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetToFilterText {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string filterString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public string fileName;
        
        public GetToFilterText() {
        }
        
        public GetToFilterText(string filterString, string fileName) {
            this.filterString = filterString;
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetToFilterText_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class GetToFilterText_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public GetToFilterText_Result() {
        }
        
        public GetToFilterText_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="HasExtension", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class HasExtension {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string filePath;
        
        public HasExtension() {
        }
        
        public HasExtension(string filePath) {
            this.filePath = filePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="HasExtension_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class HasExtension_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public bool return_value;
        
        public HasExtension_Result() {
        }
        
        public HasExtension_Result(bool return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsAllowedPath", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class IsAllowedPath {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public bool skipError;
        
        public IsAllowedPath() {
        }
        
        public IsAllowedPath(string path, bool skipError) {
            this.path = path;
            this.skipError = skipError;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsAllowedPath_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class IsAllowedPath_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public bool return_value;
        
        public IsAllowedPath_Result() {
        }
        
        public IsAllowedPath_Result(bool return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsLocalFileSystemAccessible", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class IsLocalFileSystemAccessible {
        
        public IsLocalFileSystemAccessible() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsLocalFileSystemAccessible_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class IsLocalFileSystemAccessible_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public bool return_value;
        
        public IsLocalFileSystemAccessible_Result() {
        }
        
        public IsLocalFileSystemAccessible_Result(bool return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsValidFileName", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class IsValidFileName {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string fileName;
        
        public IsValidFileName() {
        }
        
        public IsValidFileName(string fileName) {
            this.fileName = fileName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsValidFileName_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class IsValidFileName_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public bool return_value;
        
        public IsValidFileName_Result() {
        }
        
        public IsValidFileName_Result(bool return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Magicpath", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class Magicpath {
        
        public Magicpath() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Magicpath_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class Magicpath_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public Magicpath_Result() {
        }
        
        public Magicpath_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveAndRenameServerFile", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class MoveAndRenameServerFile {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string absolutePathToFile;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public string relativePathFolder;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=2)]
        public string newNameFile;
        
        public MoveAndRenameServerFile() {
        }
        
        public MoveAndRenameServerFile(string absolutePathToFile, string relativePathFolder, string newNameFile) {
            this.absolutePathToFile = absolutePathToFile;
            this.relativePathFolder = relativePathFolder;
            this.newNameFile = newNameFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MoveAndRenameServerFile_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class MoveAndRenameServerFile_Result {
        
        public MoveAndRenameServerFile_Result() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OpenFileDialog", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class OpenFileDialog {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string windowTitle;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public string defaultFileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=2)]
        public string filterString;
        
        public OpenFileDialog() {
        }
        
        public OpenFileDialog(string windowTitle, string defaultFileName, string filterString) {
            this.windowTitle = windowTitle;
            this.defaultFileName = defaultFileName;
            this.filterString = filterString;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OpenFileDialog_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class OpenFileDialog_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public OpenFileDialog_Result() {
        }
        
        public OpenFileDialog_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SelectFolderDialog {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SelectFolderDialog", Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public MPIntranet.WS.FileManager.SelectFolderDialogBody Body;
        
        public SelectFolderDialog() {
        }
        
        public SelectFolderDialog(MPIntranet.WS.FileManager.SelectFolderDialogBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement")]
    public partial class SelectFolderDialogBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string windowTitle;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string selectedFolder;
        
        public SelectFolderDialogBody() {
        }
        
        public SelectFolderDialogBody(string windowTitle, string selectedFolder) {
            this.windowTitle = windowTitle;
            this.selectedFolder = selectedFolder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SelectFolderDialog_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="SelectFolderDialog_Result", Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public MPIntranet.WS.FileManager.SelectFolderDialog_ResultBody Body;
        
        public SelectFolderDialog_Result() {
        }
        
        public SelectFolderDialog_Result(MPIntranet.WS.FileManager.SelectFolderDialog_ResultBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement")]
    public partial class SelectFolderDialog_ResultBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public bool return_value;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string selectedFolder;
        
        public SelectFolderDialog_ResultBody() {
        }
        
        public SelectFolderDialog_ResultBody(bool return_value, string selectedFolder) {
            this.return_value = return_value;
            this.selectedFolder = selectedFolder;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServerFileExists", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class ServerFileExists {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string filePath;
        
        public ServerFileExists() {
        }
        
        public ServerFileExists(string filePath) {
            this.filePath = filePath;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ServerFileExists_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class ServerFileExists_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public bool return_value;
        
        public ServerFileExists_Result() {
        }
        
        public ServerFileExists_Result(bool return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StripNotsupportChrInFileName", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class StripNotsupportChrInFileName {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string inText;
        
        public StripNotsupportChrInFileName() {
        }
        
        public StripNotsupportChrInFileName(string inText) {
            this.inText = inText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StripNotsupportChrInFileName_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class StripNotsupportChrInFileName_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string return_value;
        
        public StripNotsupportChrInFileName_Result() {
        }
        
        public StripNotsupportChrInFileName_Result(string return_value) {
            this.return_value = return_value;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateFileExtension", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class ValidateFileExtension {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=0)]
        public string filePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", Order=1)]
        public string validExtensions;
        
        public ValidateFileExtension() {
        }
        
        public ValidateFileExtension(string filePath, string validExtensions) {
            this.filePath = filePath;
            this.validExtensions = validExtensions;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateFileExtension_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/codeunit/FileManagement", IsWrapped=true)]
    public partial class ValidateFileExtension_Result {
        
        public ValidateFileExtension_Result() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileManagement_PortChannel : MPIntranet.WS.FileManager.FileManagement_Port, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileManagement_PortClient : System.ServiceModel.ClientBase<MPIntranet.WS.FileManager.FileManagement_Port>, MPIntranet.WS.FileManager.FileManagement_Port {
        
        public FileManagement_PortClient() {
        }
        
        public FileManagement_PortClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileManagement_PortClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagement_PortClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagement_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.BrowseForFolderDialog_Result MPIntranet.WS.FileManager.FileManagement_Port.BrowseForFolderDialog(MPIntranet.WS.FileManager.BrowseForFolderDialog request) {
            return base.Channel.BrowseForFolderDialog(request);
        }
        
        public string BrowseForFolderDialog(string windowTitle, string defaultFolderName, bool showNewFolderButton) {
            MPIntranet.WS.FileManager.BrowseForFolderDialog inValue = new MPIntranet.WS.FileManager.BrowseForFolderDialog();
            inValue.windowTitle = windowTitle;
            inValue.defaultFolderName = defaultFolderName;
            inValue.showNewFolderButton = showNewFolderButton;
            MPIntranet.WS.FileManager.BrowseForFolderDialog_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).BrowseForFolderDialog(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.BrowseForFolderDialog_Result> MPIntranet.WS.FileManager.FileManagement_Port.BrowseForFolderDialogAsync(MPIntranet.WS.FileManager.BrowseForFolderDialog request) {
            return base.Channel.BrowseForFolderDialogAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.BrowseForFolderDialog_Result> BrowseForFolderDialogAsync(string windowTitle, string defaultFolderName, bool showNewFolderButton) {
            MPIntranet.WS.FileManager.BrowseForFolderDialog inValue = new MPIntranet.WS.FileManager.BrowseForFolderDialog();
            inValue.windowTitle = windowTitle;
            inValue.defaultFolderName = defaultFolderName;
            inValue.showNewFolderButton = showNewFolderButton;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).BrowseForFolderDialogAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.CreateFileNameWithExtension_Result MPIntranet.WS.FileManager.FileManagement_Port.CreateFileNameWithExtension(MPIntranet.WS.FileManager.CreateFileNameWithExtension request) {
            return base.Channel.CreateFileNameWithExtension(request);
        }
        
        public string CreateFileNameWithExtension(string fileNameWithoutExtension, string extension) {
            MPIntranet.WS.FileManager.CreateFileNameWithExtension inValue = new MPIntranet.WS.FileManager.CreateFileNameWithExtension();
            inValue.fileNameWithoutExtension = fileNameWithoutExtension;
            inValue.extension = extension;
            MPIntranet.WS.FileManager.CreateFileNameWithExtension_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).CreateFileNameWithExtension(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.CreateFileNameWithExtension_Result> MPIntranet.WS.FileManager.FileManagement_Port.CreateFileNameWithExtensionAsync(MPIntranet.WS.FileManager.CreateFileNameWithExtension request) {
            return base.Channel.CreateFileNameWithExtensionAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.CreateFileNameWithExtension_Result> CreateFileNameWithExtensionAsync(string fileNameWithoutExtension, string extension) {
            MPIntranet.WS.FileManager.CreateFileNameWithExtension inValue = new MPIntranet.WS.FileManager.CreateFileNameWithExtension();
            inValue.fileNameWithoutExtension = fileNameWithoutExtension;
            inValue.extension = extension;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).CreateFileNameWithExtensionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.DownloadTempFile_Result MPIntranet.WS.FileManager.FileManagement_Port.DownloadTempFile(MPIntranet.WS.FileManager.DownloadTempFile request) {
            return base.Channel.DownloadTempFile(request);
        }
        
        public string DownloadTempFile(string serverFileName) {
            MPIntranet.WS.FileManager.DownloadTempFile inValue = new MPIntranet.WS.FileManager.DownloadTempFile();
            inValue.serverFileName = serverFileName;
            MPIntranet.WS.FileManager.DownloadTempFile_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).DownloadTempFile(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.DownloadTempFile_Result> MPIntranet.WS.FileManager.FileManagement_Port.DownloadTempFileAsync(MPIntranet.WS.FileManager.DownloadTempFile request) {
            return base.Channel.DownloadTempFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.DownloadTempFile_Result> DownloadTempFileAsync(string serverFileName) {
            MPIntranet.WS.FileManager.DownloadTempFile inValue = new MPIntranet.WS.FileManager.DownloadTempFile();
            inValue.serverFileName = serverFileName;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).DownloadTempFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetDirectoryName_Result MPIntranet.WS.FileManager.FileManagement_Port.GetDirectoryName(MPIntranet.WS.FileManager.GetDirectoryName request) {
            return base.Channel.GetDirectoryName(request);
        }
        
        public string GetDirectoryName(string fileName) {
            MPIntranet.WS.FileManager.GetDirectoryName inValue = new MPIntranet.WS.FileManager.GetDirectoryName();
            inValue.fileName = fileName;
            MPIntranet.WS.FileManager.GetDirectoryName_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetDirectoryName(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetDirectoryName_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetDirectoryNameAsync(MPIntranet.WS.FileManager.GetDirectoryName request) {
            return base.Channel.GetDirectoryNameAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetDirectoryName_Result> GetDirectoryNameAsync(string fileName) {
            MPIntranet.WS.FileManager.GetDirectoryName inValue = new MPIntranet.WS.FileManager.GetDirectoryName();
            inValue.fileName = fileName;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetDirectoryNameAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetExtension_Result MPIntranet.WS.FileManager.FileManagement_Port.GetExtension(MPIntranet.WS.FileManager.GetExtension request) {
            return base.Channel.GetExtension(request);
        }
        
        public string GetExtension(string name) {
            MPIntranet.WS.FileManager.GetExtension inValue = new MPIntranet.WS.FileManager.GetExtension();
            inValue.name = name;
            MPIntranet.WS.FileManager.GetExtension_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetExtension(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetExtension_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetExtensionAsync(MPIntranet.WS.FileManager.GetExtension request) {
            return base.Channel.GetExtensionAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetExtension_Result> GetExtensionAsync(string name) {
            MPIntranet.WS.FileManager.GetExtension inValue = new MPIntranet.WS.FileManager.GetExtension();
            inValue.name = name;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetExtensionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetFileNameMimeType_Result MPIntranet.WS.FileManager.FileManagement_Port.GetFileNameMimeType(MPIntranet.WS.FileManager.GetFileNameMimeType request) {
            return base.Channel.GetFileNameMimeType(request);
        }
        
        public string GetFileNameMimeType(string fileName) {
            MPIntranet.WS.FileManager.GetFileNameMimeType inValue = new MPIntranet.WS.FileManager.GetFileNameMimeType();
            inValue.fileName = fileName;
            MPIntranet.WS.FileManager.GetFileNameMimeType_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetFileNameMimeType(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileNameMimeType_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetFileNameMimeTypeAsync(MPIntranet.WS.FileManager.GetFileNameMimeType request) {
            return base.Channel.GetFileNameMimeTypeAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileNameMimeType_Result> GetFileNameMimeTypeAsync(string fileName) {
            MPIntranet.WS.FileManager.GetFileNameMimeType inValue = new MPIntranet.WS.FileManager.GetFileNameMimeType();
            inValue.fileName = fileName;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetFileNameMimeTypeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetFileNameWithoutExtension_Result MPIntranet.WS.FileManager.FileManagement_Port.GetFileNameWithoutExtension(MPIntranet.WS.FileManager.GetFileNameWithoutExtension request) {
            return base.Channel.GetFileNameWithoutExtension(request);
        }
        
        public string GetFileNameWithoutExtension(string filePath) {
            MPIntranet.WS.FileManager.GetFileNameWithoutExtension inValue = new MPIntranet.WS.FileManager.GetFileNameWithoutExtension();
            inValue.filePath = filePath;
            MPIntranet.WS.FileManager.GetFileNameWithoutExtension_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetFileNameWithoutExtension(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileNameWithoutExtension_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetFileNameWithoutExtensionAsync(MPIntranet.WS.FileManager.GetFileNameWithoutExtension request) {
            return base.Channel.GetFileNameWithoutExtensionAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileNameWithoutExtension_Result> GetFileNameWithoutExtensionAsync(string filePath) {
            MPIntranet.WS.FileManager.GetFileNameWithoutExtension inValue = new MPIntranet.WS.FileManager.GetFileNameWithoutExtension();
            inValue.filePath = filePath;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetFileNameWithoutExtensionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetFileName_Result MPIntranet.WS.FileManager.FileManagement_Port.GetFileName(MPIntranet.WS.FileManager.GetFileName request) {
            return base.Channel.GetFileName(request);
        }
        
        public string GetFileName(string filePath) {
            MPIntranet.WS.FileManager.GetFileName inValue = new MPIntranet.WS.FileManager.GetFileName();
            inValue.filePath = filePath;
            MPIntranet.WS.FileManager.GetFileName_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetFileName(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileName_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetFileNameAsync(MPIntranet.WS.FileManager.GetFileName request) {
            return base.Channel.GetFileNameAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetFileName_Result> GetFileNameAsync(string filePath) {
            MPIntranet.WS.FileManager.GetFileName inValue = new MPIntranet.WS.FileManager.GetFileName();
            inValue.filePath = filePath;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetFileNameAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetSafeFileName_Result MPIntranet.WS.FileManager.FileManagement_Port.GetSafeFileName(MPIntranet.WS.FileManager.GetSafeFileName request) {
            return base.Channel.GetSafeFileName(request);
        }
        
        public string GetSafeFileName(string fileName) {
            MPIntranet.WS.FileManager.GetSafeFileName inValue = new MPIntranet.WS.FileManager.GetSafeFileName();
            inValue.fileName = fileName;
            MPIntranet.WS.FileManager.GetSafeFileName_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetSafeFileName(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetSafeFileName_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetSafeFileNameAsync(MPIntranet.WS.FileManager.GetSafeFileName request) {
            return base.Channel.GetSafeFileNameAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetSafeFileName_Result> GetSafeFileNameAsync(string fileName) {
            MPIntranet.WS.FileManager.GetSafeFileName inValue = new MPIntranet.WS.FileManager.GetSafeFileName();
            inValue.fileName = fileName;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetSafeFileNameAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.GetToFilterText_Result MPIntranet.WS.FileManager.FileManagement_Port.GetToFilterText(MPIntranet.WS.FileManager.GetToFilterText request) {
            return base.Channel.GetToFilterText(request);
        }
        
        public string GetToFilterText(string filterString, string fileName) {
            MPIntranet.WS.FileManager.GetToFilterText inValue = new MPIntranet.WS.FileManager.GetToFilterText();
            inValue.filterString = filterString;
            inValue.fileName = fileName;
            MPIntranet.WS.FileManager.GetToFilterText_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetToFilterText(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetToFilterText_Result> MPIntranet.WS.FileManager.FileManagement_Port.GetToFilterTextAsync(MPIntranet.WS.FileManager.GetToFilterText request) {
            return base.Channel.GetToFilterTextAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.GetToFilterText_Result> GetToFilterTextAsync(string filterString, string fileName) {
            MPIntranet.WS.FileManager.GetToFilterText inValue = new MPIntranet.WS.FileManager.GetToFilterText();
            inValue.filterString = filterString;
            inValue.fileName = fileName;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).GetToFilterTextAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.HasExtension_Result MPIntranet.WS.FileManager.FileManagement_Port.HasExtension(MPIntranet.WS.FileManager.HasExtension request) {
            return base.Channel.HasExtension(request);
        }
        
        public bool HasExtension(string filePath) {
            MPIntranet.WS.FileManager.HasExtension inValue = new MPIntranet.WS.FileManager.HasExtension();
            inValue.filePath = filePath;
            MPIntranet.WS.FileManager.HasExtension_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).HasExtension(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.HasExtension_Result> MPIntranet.WS.FileManager.FileManagement_Port.HasExtensionAsync(MPIntranet.WS.FileManager.HasExtension request) {
            return base.Channel.HasExtensionAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.HasExtension_Result> HasExtensionAsync(string filePath) {
            MPIntranet.WS.FileManager.HasExtension inValue = new MPIntranet.WS.FileManager.HasExtension();
            inValue.filePath = filePath;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).HasExtensionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.IsAllowedPath_Result MPIntranet.WS.FileManager.FileManagement_Port.IsAllowedPath(MPIntranet.WS.FileManager.IsAllowedPath request) {
            return base.Channel.IsAllowedPath(request);
        }
        
        public bool IsAllowedPath(string path, bool skipError) {
            MPIntranet.WS.FileManager.IsAllowedPath inValue = new MPIntranet.WS.FileManager.IsAllowedPath();
            inValue.path = path;
            inValue.skipError = skipError;
            MPIntranet.WS.FileManager.IsAllowedPath_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).IsAllowedPath(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsAllowedPath_Result> MPIntranet.WS.FileManager.FileManagement_Port.IsAllowedPathAsync(MPIntranet.WS.FileManager.IsAllowedPath request) {
            return base.Channel.IsAllowedPathAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsAllowedPath_Result> IsAllowedPathAsync(string path, bool skipError) {
            MPIntranet.WS.FileManager.IsAllowedPath inValue = new MPIntranet.WS.FileManager.IsAllowedPath();
            inValue.path = path;
            inValue.skipError = skipError;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).IsAllowedPathAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.IsLocalFileSystemAccessible_Result MPIntranet.WS.FileManager.FileManagement_Port.IsLocalFileSystemAccessible(MPIntranet.WS.FileManager.IsLocalFileSystemAccessible request) {
            return base.Channel.IsLocalFileSystemAccessible(request);
        }
        
        public bool IsLocalFileSystemAccessible() {
            MPIntranet.WS.FileManager.IsLocalFileSystemAccessible inValue = new MPIntranet.WS.FileManager.IsLocalFileSystemAccessible();
            MPIntranet.WS.FileManager.IsLocalFileSystemAccessible_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).IsLocalFileSystemAccessible(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsLocalFileSystemAccessible_Result> MPIntranet.WS.FileManager.FileManagement_Port.IsLocalFileSystemAccessibleAsync(MPIntranet.WS.FileManager.IsLocalFileSystemAccessible request) {
            return base.Channel.IsLocalFileSystemAccessibleAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsLocalFileSystemAccessible_Result> IsLocalFileSystemAccessibleAsync() {
            MPIntranet.WS.FileManager.IsLocalFileSystemAccessible inValue = new MPIntranet.WS.FileManager.IsLocalFileSystemAccessible();
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).IsLocalFileSystemAccessibleAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.IsValidFileName_Result MPIntranet.WS.FileManager.FileManagement_Port.IsValidFileName(MPIntranet.WS.FileManager.IsValidFileName request) {
            return base.Channel.IsValidFileName(request);
        }
        
        public bool IsValidFileName(string fileName) {
            MPIntranet.WS.FileManager.IsValidFileName inValue = new MPIntranet.WS.FileManager.IsValidFileName();
            inValue.fileName = fileName;
            MPIntranet.WS.FileManager.IsValidFileName_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).IsValidFileName(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsValidFileName_Result> MPIntranet.WS.FileManager.FileManagement_Port.IsValidFileNameAsync(MPIntranet.WS.FileManager.IsValidFileName request) {
            return base.Channel.IsValidFileNameAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.IsValidFileName_Result> IsValidFileNameAsync(string fileName) {
            MPIntranet.WS.FileManager.IsValidFileName inValue = new MPIntranet.WS.FileManager.IsValidFileName();
            inValue.fileName = fileName;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).IsValidFileNameAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.Magicpath_Result MPIntranet.WS.FileManager.FileManagement_Port.Magicpath(MPIntranet.WS.FileManager.Magicpath request) {
            return base.Channel.Magicpath(request);
        }
        
        public string Magicpath() {
            MPIntranet.WS.FileManager.Magicpath inValue = new MPIntranet.WS.FileManager.Magicpath();
            MPIntranet.WS.FileManager.Magicpath_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).Magicpath(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.Magicpath_Result> MPIntranet.WS.FileManager.FileManagement_Port.MagicpathAsync(MPIntranet.WS.FileManager.Magicpath request) {
            return base.Channel.MagicpathAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.Magicpath_Result> MagicpathAsync() {
            MPIntranet.WS.FileManager.Magicpath inValue = new MPIntranet.WS.FileManager.Magicpath();
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).MagicpathAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.MoveAndRenameServerFile_Result MPIntranet.WS.FileManager.FileManagement_Port.MoveAndRenameServerFile(MPIntranet.WS.FileManager.MoveAndRenameServerFile request) {
            return base.Channel.MoveAndRenameServerFile(request);
        }
        
        public void MoveAndRenameServerFile(string absolutePathToFile, string relativePathFolder, string newNameFile) {
            MPIntranet.WS.FileManager.MoveAndRenameServerFile inValue = new MPIntranet.WS.FileManager.MoveAndRenameServerFile();
            inValue.absolutePathToFile = absolutePathToFile;
            inValue.relativePathFolder = relativePathFolder;
            inValue.newNameFile = newNameFile;
            MPIntranet.WS.FileManager.MoveAndRenameServerFile_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).MoveAndRenameServerFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.MoveAndRenameServerFile_Result> MPIntranet.WS.FileManager.FileManagement_Port.MoveAndRenameServerFileAsync(MPIntranet.WS.FileManager.MoveAndRenameServerFile request) {
            return base.Channel.MoveAndRenameServerFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.MoveAndRenameServerFile_Result> MoveAndRenameServerFileAsync(string absolutePathToFile, string relativePathFolder, string newNameFile) {
            MPIntranet.WS.FileManager.MoveAndRenameServerFile inValue = new MPIntranet.WS.FileManager.MoveAndRenameServerFile();
            inValue.absolutePathToFile = absolutePathToFile;
            inValue.relativePathFolder = relativePathFolder;
            inValue.newNameFile = newNameFile;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).MoveAndRenameServerFileAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.OpenFileDialog_Result MPIntranet.WS.FileManager.FileManagement_Port.OpenFileDialog(MPIntranet.WS.FileManager.OpenFileDialog request) {
            return base.Channel.OpenFileDialog(request);
        }
        
        public string OpenFileDialog(string windowTitle, string defaultFileName, string filterString) {
            MPIntranet.WS.FileManager.OpenFileDialog inValue = new MPIntranet.WS.FileManager.OpenFileDialog();
            inValue.windowTitle = windowTitle;
            inValue.defaultFileName = defaultFileName;
            inValue.filterString = filterString;
            MPIntranet.WS.FileManager.OpenFileDialog_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).OpenFileDialog(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.OpenFileDialog_Result> MPIntranet.WS.FileManager.FileManagement_Port.OpenFileDialogAsync(MPIntranet.WS.FileManager.OpenFileDialog request) {
            return base.Channel.OpenFileDialogAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.OpenFileDialog_Result> OpenFileDialogAsync(string windowTitle, string defaultFileName, string filterString) {
            MPIntranet.WS.FileManager.OpenFileDialog inValue = new MPIntranet.WS.FileManager.OpenFileDialog();
            inValue.windowTitle = windowTitle;
            inValue.defaultFileName = defaultFileName;
            inValue.filterString = filterString;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).OpenFileDialogAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.SelectFolderDialog_Result MPIntranet.WS.FileManager.FileManagement_Port.SelectFolderDialog(MPIntranet.WS.FileManager.SelectFolderDialog request) {
            return base.Channel.SelectFolderDialog(request);
        }
        
        public bool SelectFolderDialog(string windowTitle, ref string selectedFolder) {
            MPIntranet.WS.FileManager.SelectFolderDialog inValue = new MPIntranet.WS.FileManager.SelectFolderDialog();
            inValue.Body = new MPIntranet.WS.FileManager.SelectFolderDialogBody();
            inValue.Body.windowTitle = windowTitle;
            inValue.Body.selectedFolder = selectedFolder;
            MPIntranet.WS.FileManager.SelectFolderDialog_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).SelectFolderDialog(inValue);
            selectedFolder = retVal.Body.selectedFolder;
            return retVal.Body.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.SelectFolderDialog_Result> MPIntranet.WS.FileManager.FileManagement_Port.SelectFolderDialogAsync(MPIntranet.WS.FileManager.SelectFolderDialog request) {
            return base.Channel.SelectFolderDialogAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.SelectFolderDialog_Result> SelectFolderDialogAsync(string windowTitle, string selectedFolder) {
            MPIntranet.WS.FileManager.SelectFolderDialog inValue = new MPIntranet.WS.FileManager.SelectFolderDialog();
            inValue.Body = new MPIntranet.WS.FileManager.SelectFolderDialogBody();
            inValue.Body.windowTitle = windowTitle;
            inValue.Body.selectedFolder = selectedFolder;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).SelectFolderDialogAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.ServerFileExists_Result MPIntranet.WS.FileManager.FileManagement_Port.ServerFileExists(MPIntranet.WS.FileManager.ServerFileExists request) {
            return base.Channel.ServerFileExists(request);
        }
        
        public bool ServerFileExists(string filePath) {
            MPIntranet.WS.FileManager.ServerFileExists inValue = new MPIntranet.WS.FileManager.ServerFileExists();
            inValue.filePath = filePath;
            MPIntranet.WS.FileManager.ServerFileExists_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).ServerFileExists(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.ServerFileExists_Result> MPIntranet.WS.FileManager.FileManagement_Port.ServerFileExistsAsync(MPIntranet.WS.FileManager.ServerFileExists request) {
            return base.Channel.ServerFileExistsAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.ServerFileExists_Result> ServerFileExistsAsync(string filePath) {
            MPIntranet.WS.FileManager.ServerFileExists inValue = new MPIntranet.WS.FileManager.ServerFileExists();
            inValue.filePath = filePath;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).ServerFileExistsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.StripNotsupportChrInFileName_Result MPIntranet.WS.FileManager.FileManagement_Port.StripNotsupportChrInFileName(MPIntranet.WS.FileManager.StripNotsupportChrInFileName request) {
            return base.Channel.StripNotsupportChrInFileName(request);
        }
        
        public string StripNotsupportChrInFileName(string inText) {
            MPIntranet.WS.FileManager.StripNotsupportChrInFileName inValue = new MPIntranet.WS.FileManager.StripNotsupportChrInFileName();
            inValue.inText = inText;
            MPIntranet.WS.FileManager.StripNotsupportChrInFileName_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).StripNotsupportChrInFileName(inValue);
            return retVal.return_value;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.StripNotsupportChrInFileName_Result> MPIntranet.WS.FileManager.FileManagement_Port.StripNotsupportChrInFileNameAsync(MPIntranet.WS.FileManager.StripNotsupportChrInFileName request) {
            return base.Channel.StripNotsupportChrInFileNameAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.StripNotsupportChrInFileName_Result> StripNotsupportChrInFileNameAsync(string inText) {
            MPIntranet.WS.FileManager.StripNotsupportChrInFileName inValue = new MPIntranet.WS.FileManager.StripNotsupportChrInFileName();
            inValue.inText = inText;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).StripNotsupportChrInFileNameAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MPIntranet.WS.FileManager.ValidateFileExtension_Result MPIntranet.WS.FileManager.FileManagement_Port.ValidateFileExtension(MPIntranet.WS.FileManager.ValidateFileExtension request) {
            return base.Channel.ValidateFileExtension(request);
        }
        
        public void ValidateFileExtension(string filePath, string validExtensions) {
            MPIntranet.WS.FileManager.ValidateFileExtension inValue = new MPIntranet.WS.FileManager.ValidateFileExtension();
            inValue.filePath = filePath;
            inValue.validExtensions = validExtensions;
            MPIntranet.WS.FileManager.ValidateFileExtension_Result retVal = ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).ValidateFileExtension(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<MPIntranet.WS.FileManager.ValidateFileExtension_Result> MPIntranet.WS.FileManager.FileManagement_Port.ValidateFileExtensionAsync(MPIntranet.WS.FileManager.ValidateFileExtension request) {
            return base.Channel.ValidateFileExtensionAsync(request);
        }
        
        public System.Threading.Tasks.Task<MPIntranet.WS.FileManager.ValidateFileExtension_Result> ValidateFileExtensionAsync(string filePath, string validExtensions) {
            MPIntranet.WS.FileManager.ValidateFileExtension inValue = new MPIntranet.WS.FileManager.ValidateFileExtension();
            inValue.filePath = filePath;
            inValue.validExtensions = validExtensions;
            return ((MPIntranet.WS.FileManager.FileManagement_Port)(this)).ValidateFileExtensionAsync(inValue);
        }
    }
}
